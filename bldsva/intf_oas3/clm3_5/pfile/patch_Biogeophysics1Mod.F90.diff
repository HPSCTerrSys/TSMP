--- Biogeophysics1Mod.F90	2007-04-26 20:50:19.000000000 +0200
+++ Biogeophysics1Mod.F90	2019-12-04 12:52:05.681255000 +0100
@@ -68,7 +68,8 @@
     use clm_atmlnd         , only : clm_a2l
     use clm_varcon         , only : denh2o, denice, roverg, hvap, hsub, &
                                     istice, istwet, zlnd, zsno, spval
-    use clm_varpar         , only : nlevsoi, nlevsno
+    use clm_varpar         , only : nlevsoi, nlevsno, max_pft_per_col, &
+                                    maxpatch_pft      !CPS added max_pft_per_col
     use QSatMod            , only : QSat
 !
 ! !ARGUMENTS:
@@ -98,6 +99,12 @@
     integer , pointer :: ityplun(:)       !landunit type
     integer , pointer :: clandunit(:)     !column's landunit index
     integer , pointer :: cgridcell(:)     !column's gridcell index
+!CPS
+    integer , pointer :: pfti(:)          ! beginning pft index for each column
+    integer , pointer :: npfts(:)         ! column's number of pfts - ADD
+    real(r8), pointer :: forc_hgt_u(:)    !observation height of wind [m] 
+    real(r8), pointer :: forc_hgt_q(:)    !observation height of humidity [m]
+!CPS
     real(r8), pointer :: forc_pbot(:)     !atmospheric pressure (Pa)
     real(r8), pointer :: forc_q(:)        !atmospheric specific humidity (kg/kg)
     real(r8), pointer :: forc_t(:)        !atmospheric temperature (Kelvin)
@@ -106,6 +113,9 @@
     real(r8), pointer :: forc_u(:)        !atmospheric wind speed in east direction (m/s)
     real(r8), pointer :: forc_v(:)        !atmospheric wind speed in north direction (m/s)
     real(r8), pointer :: smpmin(:)        !restriction for min of soil potential (mm)
+#if defined COUP_OAS_PFL
+    real(r8), pointer :: pfl_psi(:,:)
+#endif
     integer , pointer :: snl(:)           !number of snow layers
     real(r8), pointer :: frac_sno(:)      !fraction of ground covered by snow (0 to 1)
     real(r8), pointer :: h2osno(:)        !snow water (mm H2O)
@@ -162,6 +172,7 @@
     integer  :: j       !soil/snow level index
     integer  :: fp      !lake filter pft index
     integer  :: fc      !lake filter column index
+    integer  :: pi      ! CPS
     real(r8) :: qred    !soil surface relative humidity
     real(r8) :: avmuir  !ir inverse optical depth per unit leaf area
     real(r8) :: eg      !water vapor pressure at temperature T [pa]
@@ -192,6 +203,12 @@
 
     cgridcell     => clm3%g%l%c%gridcell
     clandunit     => clm3%g%l%c%landunit
+!CPS
+    forc_hgt_u    => clm_a2l%forc_hgt_u
+    forc_hgt_q    => clm_a2l%forc_hgt_q
+    npfts         => clm3%g%l%c%npfts
+    pfti          => clm3%g%l%c%pfti
+!CPS
     beta          => clm3%g%l%c%cps%beta
     dqgdT         => clm3%g%l%c%cws%dqgdT
     emg           => clm3%g%l%c%cps%emg
@@ -200,6 +217,9 @@
     htvp          => clm3%g%l%c%cps%htvp
     qg            => clm3%g%l%c%cws%qg
     smpmin        => clm3%g%l%c%cps%smpmin
+#if defined COUP_OAS_PFL
+    pfl_psi       => clm3%g%l%c%cps%pfl_psi
+#endif
     snl           => clm3%g%l%c%cps%snl
     t_grnd        => clm3%g%l%c%ces%t_grnd
     thm           => clm3%g%l%c%ces%thm
@@ -274,8 +294,13 @@
           wx   = (h2osoi_liq(c,1)/denh2o+h2osoi_ice(c,1)/denice)/dz(c,1)
           fac  = min(1._r8, wx/watsat(c,1))
           fac  = max( fac, 0.01_r8 )
+#if defined COUP_OAS_PFL
+          if (pfl_psi(c,1)>= 0.0_r8)  psit = 0._r8
+          if (pfl_psi(c,1) < 0.0_r8)  psit = pfl_psi(c,1)
+#else
           psit = -sucsat(c,1) * fac ** (-bsw(c,1))
           psit = max(smpmin(c), psit)
+#endif
           hr   = exp(psit/roverg/t_grnd(c))
           qred = (1._r8-frac_sno(c))*hr + frac_sno(c)
           soilalpha(c) = qred
@@ -365,14 +390,40 @@
        ! Roughness lengths over vegetation
 
        z0m(p)    = z0mr(ivt(p)) * htop(p)
-       displa(p) = displar(ivt(p)) * htop(p)
 
+       displa(p) = displar(ivt(p)) * htop(p)
        z0mv(p)   = z0m(p)
        z0hv(p)   = z0mv(p)
        z0qv(p)   = z0mv(p)
 
     end do
 
+!CPS change forc_hgt = forc_hgt + z0m + displa at PFT level, works for 1 pft max
+!    if (max_pft_per_col .eq. 1) then
+    if (maxpatch_pft .eq. 1) then
+    do pi = 1,max_pft_per_col
+      do fc = 1,num_nolakec
+        c = filter_nolakec(fc)
+        l = clandunit(c)
+        g = cgridcell(c)
+        if (pi <= npfts(c)) then
+          p = pfti(c) + pi - 1
+          
+          if (frac_sno(c) > 0._r8 ) then
+            forc_hgt_u(p) = forc_hgt_u(g) + z0mg(c) + displa(p)
+            forc_hgt_t(g) = forc_hgt_t(g) + z0mg(c) + displa(p)
+            forc_hgt_q(g) = forc_hgt_q(g) + z0mg(c) + displa(p)
+          else
+            forc_hgt_u(g) = forc_hgt_u(g) + z0m(p) + displa(p)
+            forc_hgt_t(g) = forc_hgt_t(g) + z0m(p) + displa(p)
+            forc_hgt_q(g) = forc_hgt_q(g) + z0m(p) + displa(p)
+          end if
+        end if
+      end do
+    end do
+    end if
+!CPS
+
   end subroutine Biogeophysics1
 
 end module Biogeophysics1Mod
