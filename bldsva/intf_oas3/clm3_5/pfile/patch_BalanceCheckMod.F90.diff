--- BalanceCheckMod.F90	2007-04-26 20:50:19.000000000 +0200
+++ BalanceCheckMod.F90	2019-12-04 12:52:05.727908000 +0100
@@ -82,6 +82,9 @@
 !
     real(r8), pointer :: h2ocan_col(:)         ! canopy water (mm H2O) (column level)
     real(r8), pointer :: begwb(:)              ! water mass begining of the time step
+#if defined COUP_OAS_PFL
+    real(r8), pointer :: endwb(:)              ! water mass end of the time step
+#endif
 !
 ! !OTHER LOCAL VARIABLES:
 !
@@ -96,6 +99,9 @@
     begwb              => clm3%g%l%c%cwbal%begwb
     h2ocan_col         => clm3%g%l%c%cws%pws_a%h2ocan
     wa                 => clm3%g%l%c%cws%wa
+#if defined COUP_OAS_PFL
+    endwb              => clm3%g%l%c%cwbal%endwb
+#endif
 
     ! Assign local pointers to derived type members (pft-level)
 
@@ -109,14 +115,22 @@
 !cdir nodep
     do f = 1, num_nolakec
        c = filter_nolakec(f)
+#if defined COUP_OAS_PFL
+       begwb(c) = endwb(c) !CMS: we use the water stored at previous time step
+                           !     that accounts for h2ocan + h2osno + h2osoi_ice + h2osoi_liq 
+                           !     we do not consider anymore the unconfined aquifer
+#else
        begwb(c) = h2ocan_col(c) + h2osno(c) + wa(c)
+#endif
     end do
     do j = 1, nlevsoi
 !dir$ concurrent
 !cdir nodep
       do f = 1, num_nolakec
          c = filter_nolakec(f)
+#if ! defined COUP_OAS_PFL
          begwb(c) = begwb(c) + h2osoi_ice(c,j) + h2osoi_liq(c,j)
+#endif
       end do
     end do
 
@@ -200,6 +214,10 @@
     real(r8), pointer :: qflx_drain(:)      ! sub-surface runoff (mm H2O /s)
     real(r8), pointer :: forc_solad(:,:)    ! direct beam radiation (vis=forc_sols , nir=forc_soll )
     real(r8), pointer :: forc_solai(:,:)    ! diffuse radiation     (vis=forc_solsd, nir=forc_solld)
+#if defined COUP_OAS_PFL
+    real(r8), pointer :: pfl_psi(:,:)       ! soil matrix potential received from ParFlow (mm)
+#endif
+
 !
 ! local pointers to original implicit out arguments
 !
@@ -226,6 +244,10 @@
     forc_lwrad        => clm_a2l%forc_lwrad
     forc_solad        => clm_a2l%forc_solad
     forc_solai        => clm_a2l%forc_solai
+#if defined COUP_OAS_PFL
+    pfl_psi           => clm3%g%l%c%cps%pfl_psi
+#endif
+
 
     ! Assign local pointers to derived type scalar members (column-level)
 
@@ -267,20 +289,32 @@
 !cdir nodep
     do c = lbc, ubc
        g = cgridcell(c)
-       
+#if defined COUP_OAS_PFL
+       if (pfl_psi(c,1) .GT. 0) then
+           errh2o(c) = endwb(c) - begwb(c) - pfl_psi(c,1) &                !CMS: we consider the amount of water stored at
+                - (forc_rain(g) + forc_snow(g) - qflx_evap_tot(c)) * dtime !     the surface as calculated by pfl
+       else
+           errh2o(c) = endwb(c) - begwb(c) &
+                - (forc_rain(g) + forc_snow(g) - qflx_evap_tot(c)) * dtime
+       end if
+    
+#else       
        errh2o(c) = endwb(c) - begwb(c) &
             - (forc_rain(g) + forc_snow(g) - qflx_evap_tot(c) - qflx_surf(c) &
             - qflx_qrgwl(c) - qflx_drain(c)) * dtime
-
+#endif
     end do
 
     found = .false.
+!CMS: We relax this condition in coupling w/ pfl
+#if ! defined COUP_OAS_PFL
     do c = lbc, ubc
        if (abs(errh2o(c)) > 1e-7_r8) then
           found = .true.
           index = c
        end if
     end do
+#endif
     if ( found ) then
        write(6,*)'WARNING:  water balance error ',&
             ' nstep = ',nstep,' index= ',index,' errh2o= ',errh2o(index)
