--- atmdrvMod.F90	2007-04-24 23:49:05.000000000 +0200
+++ atmdrvMod.F90	2019-12-04 12:52:05.678838000 +0100
@@ -17,7 +17,7 @@
   use shr_kind_mod , only : r8 => shr_kind_r8
   use shr_const_mod, only : SHR_CONST_TKFRZ, SHR_CONST_PSTD
   use abortutils   , only : endrun
-  use spmdMod      , only : masterproc, mpicom, comp_id, MPI_REAL8, MPI_INTEGER, iam
+  use spmdMod      , only : masterproc, mpicom, comp_id, MPI_REAL8, MPI_INTEGER, iam, MPI_LOGICAL
   use clm_mct_mod
   use decompMod    , only : gsMap_atm_gdc2glo, perm_atm_gdc2glo
   use perf_mod
@@ -30,6 +30,14 @@
   public :: atmdrv_init  ! read atmospheric grid
   public :: atmdrv       ! read atmospheric data
 !
+#if (defined COUP_OAS_PFL || defined COUP_OAS_COS)
+! CPS and CMS
+! x is made public with COUP_OAS_COS or COUP_OAS_PFL, 
+! atmospheric forcing variables on raw data grid (public for coupling case), used in receive field
+!
+  real(r8), public, allocatable :: x(:,:,:)            !temp. array in which atm data is stored
+#endif
+
 ! !REVISION HISTORY:
 ! Created by Gordon Bonan, Sam Levis and Mariana Vertenstein
 ! 2005.12.15 T Craig Updated
@@ -46,7 +54,14 @@
 !
 ! logical variables for file manipuation
 !
+#if defined COUP_OAS_COS
+
+  ! If OASIS coupling, never open input data file 
+  logical :: open_data=.false.         !true => open data file (first tstep &
+                                       !        of the run or month)
+#else
   logical :: open_data=.true.          !true => open data file (first tstep &
+#endif
                                        !        of the run or month)
   logical :: allocated_data=.false.    !true => allocate dynamic data
 !
@@ -57,7 +72,7 @@
 !
 ! primary field names
 !
-  integer,parameter:: aV_d2a_size=14
+  integer,parameter:: aV_d2a_size=15                                            !MU: changed to 15
   character(len=8) :: aV_d2a_list(av_d2a_size)    ! local aV list for d2a
   data av_d2a_list( 1) /'f_txy   '/     ! bottom level temp (K)
   data av_d2a_list( 2) /'f_uxy   '/     ! bottom level zonal wind (m/s)
@@ -73,8 +88,11 @@
   data av_d2a_list(12) /'f_solld '/     ! nir diffuse solar rad onto srf (W/m**2)
   data av_d2a_list(13) /'f_pbotxy'/     ! bottom level pressure (Pa)
   data av_d2a_list(14) /'f_psrfxy'/     ! surface pressure (Pa)
+!MU (19.10.2012)
+  data av_d2a_list(15) /'f_co2   '/     ! CO2 partial pressure (Pa)
+!MU (19.10.2012)
   integer :: if_txy, if_uxy, if_vxy, if_qxy, izgcmxy, iprcxy, iprlxy, iflwdsxy, &
-             if_sols, if_soll, if_solsd, if_solld, if_pbotxy, if_psrfxy
+             if_sols, if_soll, if_solsd, if_solld, if_pbotxy, if_psrfxy, if_co2     !MU (21.09.2012) if_co2 added
 
   type(mct_gsMap) :: gsMap_drv_glo0
   type(mct_aVect) :: aV_drv_d2a, aV_atm_d2a
@@ -83,9 +101,11 @@
   logical         :: usevector=.false.
 
 !
+#if ! (defined COUP_OAS_PFL || defined COUP_OAS_COS)
 ! atmospheric forcing variables on raw data grid
 !
   real(r8), allocatable :: x(:,:,:)            !temp. array in which atm data is stored
+#endif
 !
 ! file netCDF id's
 !
@@ -171,7 +191,7 @@
 !
 !EOP
 !
-! LOCAL VARIABLES:
+! LOCAL VARIABLE:
     integer :: i,j,n,k,g,g1           !indices
     integer :: itimlast               !last time index used in atmrd
     real(r8):: calday                 !calendar day at Greenwich (1.00 -> 365.99)
@@ -190,6 +210,9 @@
     real(r8):: coefb        ! Slope of "Alta" expression for dependence of flfall on temp
     real(r8):: coefa        ! Offset of  of "Alta" expression for dependence of flfall on temp
     integer :: begg, endg   ! per-proc gridcell ending gridcell indices
+! CPS
+    logical :: lcoupled                !determine if coupling time step or not
+
 !------------------------------------------------------------------------
 
     ! Determine necessary indices
@@ -215,6 +238,13 @@
        call atm_openfile (kda, kmo, kyr, locfn, itim, atmmin)
     endif
 
+#if defined COUP_OAS_COS
+    ! Coupling routines called at each time step 
+    ! but arrays updated only at coupling time step
+    itim = nstep - 1
+
+    ! If OASIS coupling, never read input data files
+#else
     ! Calculate time index
 
     itimlast = itim
@@ -228,7 +258,7 @@
     ! Determine if new data is to be read
 
     if (open_data .or. mod(nstep-1,atmmin*secpmin/dtime) ==0 ) then
-
+#endif
        ! Read data for current time slice
 
        call t_startf('atmdread')
@@ -243,9 +273,16 @@
           write (6,'(72a1)') ("-",i=1,60)
           write (6,*)
        endif
-       call atm_readdata (locfn, kmo, itim)
+!       call atm_readdata (locfn, kmo, itim)           !CPS
+       call atm_readdata (locfn, kmo, itim, lcoupled)  !CPS
        call t_stopf('atmdread')
 
+#if defined COUP_OAS_COS
+
+       ! At coupling time step, update internal arrays which need coupling fields 
+       if ( lcoupled ) THEN 
+#endif
+
        ! Map 2d atmospheric fields from atmospheric grid to land model surface grid.
        ! Area-average absolute value of winds (i.e., regardless of
        ! direction) since land model cares about magnitude not direction.
@@ -264,7 +301,7 @@
 #endif
 !dir$ concurrent
 !cdir nodep
-
+       
        do g = begg, endg
           g1 = g - begg + 1
           i = adecomp%gdc2i(g)
@@ -292,7 +329,20 @@
 
           !BGC tracers
 
+!MU (15.01.2013)
+#if defined COUP_OAS_COS
+!    input for CLM is partial pressure of CO2 (from OASIS3)
+!      ==> no conversion here
+          IF ( nint(aV_atm_d2a%rAttr(if_co2,g1)) == -999 ) THEN
+            atm_a2l%forc_pco2(g) = co2_ppmv_const * 1.e-6_r8 * atm_a2l%forc_pbot(g)
+          ELSE
+            atm_a2l%forc_pco2(g) = aV_atm_d2a%rAttr(if_co2,g1)
+          ENDIF
+#else
           atm_a2l%forc_pco2(g) = co2_ppmv_const * 1.e-6_r8 * atm_a2l%forc_pbot(g)
+#endif
+!MU (15.01.2013)
+
           atm_a2l%forc_po2(g)  = o2_molar_const * atm_a2l%forc_pbot(g)
           ! 4/14/05: PET
           ! Adding isotope code
@@ -341,15 +391,16 @@
 
        call t_stopf('atmdinterp')
 
-    end if
-
+    end if             !CPS end if for both "if (open_data ..." and "if ( lcoupled )" cases
     ! Reset open_data
 
+#if ! defined COUP_OAS_COS
     if (open_data) then
        open_data = .false.    !reset to false
     elseif (kda == 1 .and. mcsec == 0) then
        open_data = .true.     !for next time step
     endif
+#endif
 
   end subroutine atmdrv
 
@@ -366,7 +417,7 @@
 !
 ! !USES:
     use nanMod
-    use clm_varctl  , only : offline_atmdir
+    use clm_varctl  , only : offline_atmdir, fatmgrid        !CPS fatmgrid added
     use domainMod   , only : alatlon, latlon_type, latlon_check, latlon_clean
     use surfrdMod   , only : surfrd_get_latlon
     use decompMod   , only : adecomp
@@ -383,7 +434,7 @@
 !
 !EOP
 !
-! LOCAL VARIABLES:
+! LOCAL VARIABLE:
     type(latlon_type)  :: dlatlon        ! data file domain
     integer :: kda                !day (1 -> 31)
     integer :: kmo                !month (1 -> 12)
@@ -407,6 +458,7 @@
     integer :: ngseg              ! gsmap size
     integer :: root               ! root pe number
     integer,allocatable :: start(:),length(:),pe_loc(:)  ! for gsmap
+    integer,pointer     :: dmask(:)                      !CPS
 !------------------------------------------------------------------------
 
     atmlon = alatlon%ni
@@ -419,12 +471,34 @@
     ! Build [month]-[year] extension for file name to be read
     ! append extension to path name to get full file name
 
+! CPS CLM3.5 has two grids: 1) Offline Atm Grid and 2) Land Grid.
+! CPS When coupled with OASIS3 to COSMO, we do not read the Offline Atm data 
+! CPS but we do need to read the Atm grid, so for the coupling , the Atm grid is
+! CPS made consistent with the Land grid. Simply this will make the allocated
+! CPS filed x(:,:,:) consistent with the received field exfld(:,:,:) from oasis3.
+#if defined COUP_OAS_COS
+    PRINT*, "CLM3.5 - atmDrv routine, Read dlatlon from ", TRIM(fatmgrid) 
+    call surfrd_get_latlon(dlatlon, fatmgrid)
+    call latlon_check(dlatlon)
+#else
     call get_curr_date(kyr, kmo, kda, mcsec)
     write (ext,'(i4.4,"-",i2.2)') kyr,kmo
     filenam = trim(offline_atmdir) // '/' // ext // '.nc'
 
+    PRINT*, "CLM3.5 filename", filenam
+    PRINT*, "CLM3.5 - atmDrv routine, Read dlatlon from ", filenam
     call surfrd_get_latlon(dlatlon, filenam)
     call latlon_check(dlatlon)
+#endif
+
+#if (defined COUP_OAS_PFL || defined COUP_OAS_COS)
+    ! Need dmask information at this stage for OASIS definitions
+    ! to be able to set up coupling only on PE with at least one land point
+    ! Call to OASIS definitions, we use the same definition for both cosmo and
+    ! parflow coupling !CMS and CPS
+!CPS    call oas_clm_define(filenam)
+    call oas_clm_define(fatmgrid)    !CPS sending clm global grid to oasis define
+#endif
 
     datlon = dlatlon%ni
     datlat = dlatlon%nj
@@ -463,8 +537,18 @@
     if_solld  = mct_aVect_indexRA(aV_drv_d2a,'f_solld' ,perrWith=subName)
     if_pbotxy = mct_aVect_indexRA(aV_drv_d2a,'f_pbotxy',perrWith=subName)
     if_psrfxy = mct_aVect_indexRA(aV_drv_d2a,'f_psrfxy',perrWith=subName)
+!MU (21.09.2012)
+#if defined COUP_OAS_COS
+    if_co2    = mct_aVect_indexRA(aV_drv_d2a,'f_co2'   ,perrWith=subName)
+#endif
+!MU (21.09.2012)
     
+#if defined COUP_OAS_COS  
+    ! Add 3 fields to x arrays (UV winds, CO2 partial pressure)
+    allocate( x(datlon,datlat,17), stat=ier)    !MU: changed from 16 to 17 due to CO2 coupling
+#else
     allocate( x(datlon,datlat,14), stat=ier)
+#endif
     if (ier /= 0) then
        write (6,*) 'atmdrv_init(): allocation error _d'
        call endrun
@@ -544,7 +628,7 @@
 !
 !EOP
 !
-! LOCAL VARIABLES:
+! LOCAL VARIABLE:
     integer :: i,j,k,n                !do loop indices
     integer :: dimid                  !netCDF dimension id
     integer :: status                 !netCDF error status
@@ -616,9 +700,7 @@
 
        ! Open netCDF data file and get lengths of lat,lon,time dimensions
        ! Do this only at the first timestep of the run or of the month
-
        call check_ret(nf_open (locfn, nf_nowrite, ncid), subname)
-
        call check_ret(nf_inq_dimid  (ncid, 'lon', dimid), subname)
        call check_ret(nf_inq_dimlen (ncid, dimid, nlon), subname)
 
@@ -671,7 +753,8 @@
 ! !IROUTINE: atm_readdata
 !
 ! !INTERFACE:
-  subroutine atm_readdata (fname, kmo, itim)
+!CPS  subroutine atm_readdata (fname, kmo, itim)
+  subroutine atm_readdata (fname, kmo, itim, lcoupled)
 !
 ! !DESCRIPTION:
 ! read atmospheric forcing single level fields from netCDF file
@@ -698,13 +781,14 @@
     implicit none
     character(len=*), intent(in) :: fname           !history file to open and read
     integer, intent(in)  :: kmo, itim               !current month and time index
+    logical, intent(out) :: lcoupled                !CPS determine if coupling time step or not, added argument for COUP_OAS
 !
 ! !REVISION HISTORY:
 ! Created by Sam Levis
 !
 !EOP
 !
-! LOCAL VARIABLES:
+! LOCAL VARIABLE:
     integer :: i,j,k,n                  !do loop indices
     integer :: ier                      !error status
     integer :: varid                    !netCDF variable id
@@ -741,7 +825,7 @@
                b4=5.824720280e-06_r8, b5=4.838803174e-08_r8, &
                b6=1.838826904e-10_r8)
 
-    integer,parameter:: fldsize=14
+    integer,parameter:: fldsize=14       
     character(len=8) :: fldlst(fldsize)      !name of possible atm fields in input file
     data fldlst( 1) /'TBOT    '/
     data fldlst( 2) /'WIND    '/
@@ -756,7 +840,7 @@
     data fldlst(11) /'FLDS    '/
     data fldlst(12) /'PRECTmms'/
     data fldlst(13) /'PRECCmms'/
-    data fldlst(14) /'PRECLmms'/
+    data fldlst(14) /'PRECLmms'/     
 !
 ! function declarations
 !
@@ -765,21 +849,27 @@
     esati(t) = 100._r8*(b0+t*(b1+t*(b2+t*(b3+t*(b4+t*(b5+t*b6))))))
 !------------------------------------------------------------------------
 
+    ! Read single level fields
 
+    if (masterproc) x(:,:,:) = -1._r8             !CPS  initialize fields to the flag value
 
-    ! Read single level fields
+#if defined COUP_OAS_COS
+    ! Get atmospheric coupled fields at this stage
+    call receive_fld_2cos(itim, lcoupled)         !CPS receive x(:,:,:) fields here
+#else
 
     if (masterproc) then
 
-       ! initialize fields to the flag value
+!CPS       ! initialize fields to the flag value
 
-       x(:,:,:) = -1._r8
+!CPS       x(:,:,:) = -1._r8
 
        ! read input data single-level fields
 
        beg3d(1) = 1     ;  len3d(1) = datlon
        beg3d(2) = 1     ;  len3d(2) = datlat
-       beg3d(3) = itim  ;  len3d(3) = 1
+       beg3d(3) = itim  ;   len3d(3) = 1
+
        do k = 1, 14
           do n = 1, nvar
              if (varnam(n) == fldlst(k)) then
@@ -790,7 +880,6 @@
 
        ! Close file at the end of the month
        ! NOTE: as written will not close file if run ends mid-month
-
        if (itim == ntim) then
           call check_ret(nf_close (ncid), subname)
           write (6,*) '---------------------------------------'
@@ -801,6 +890,7 @@
 
     endif     !end of if-masterproc block
 
+#endif        !COUP_OAS_COS
     ! ----------------------------------------------------------------------
     ! Determine 2d atmospheric fields
     ! Follow order in fldlst(14) to determine what was read and what was not
@@ -835,9 +925,29 @@
              write(6,*)'ATM error: WIND has not been read by atmrd'
              atmread_err = .true.
           else
+#if defined COUP_OAS_COS
+             ! Use component of wind fields from atmosphere
+             ! instead of norm 
+             ! WARNING !   Why sqrt 2 ????
+             aV_drv_d2a%rAttr(if_uxy,n) = abs(x(i,j,15))   !CPS CLM cares for magnitude
+             aV_drv_d2a%rAttr(if_vxy,n) = abs(x(i,j,16))   !CPS CLM cares for magnitude
+#else
              aV_drv_d2a%rAttr(if_uxy,n) = x(i,j,2) / sqrt(2._r8)
              aV_drv_d2a%rAttr(if_vxy,n) = x(i,j,2) / sqrt(2._r8)
+#endif
+          end if
+
+!MU (20.09.2012)
+#if defined COUP_OAS_COS
+          ! FORC_PCO2
+          if (nint(x(i,j,17)) == -1) then
+             write(6,*)'ATM error: PCO2 has not been read by atmrd'
+             atmread_err = .true.
+          else
+             aV_drv_d2a%rAttr(if_co2,n) = x(i,j,17)
           end if
+#endif
+!MU (20.09.2012)
 
           ! FORC_PSRFXY, FORC_PBOTXY
           if (nint(x(i,j,7)) == -1) then
@@ -897,9 +1007,19 @@
           if (nint(x(i,j,6)) == -1) then
              aV_drv_d2a%rAttr(izgcmxy,n) = 30._r8
           else
+!CPS             write(6,*) 'MS warning'
+!CPS             write(85,*) x(i,j,6)
              aV_drv_d2a%rAttr(izgcmxy,n) = x(i,j,6)
           end if
 
+#ifdef COUP_OAS_COS
+!CPS bug fix for max canopy ht > forcing hght
+!CPS          if ((x(i,j,6)) < 30._r8) then
+!CPS              aV_drv_d2a%rAttr(izgcmxy,n) = 30._r8
+!CPS          end if
+#endif
+
+
           ! FORC_SOLSXY, FORC_SOLLXY, FORC_SOLSDXY, FORC_SOLLDXY
 
           if (nint(x(i,j,9))==-1.or.nint(x(i,j,10))==-1) then
@@ -983,7 +1103,7 @@
 !
 !EOP
 !
-! LOCAL VARIABLES:
+! LOCAL VARIABLE:
     integer  :: i,j,n,g,k,g1              !longitude,latitude loop indices
     real(r8),target :: forc_u(datlon*datlat)  !dummy wind (u)
     real(r8),target :: forc_v(datlon*datlat)  !dummy wind (v)
@@ -1006,8 +1126,24 @@
        end do
     endif
 
-    call mct_Smat_AvMult(av_drv_d2a, sMatP_d2a, av_atm_d2a, vector=usevector)
-    call mct_aVect_unpermute(av_atm_d2a, perm_atm_gdc2glo)
+!#ifdef COUP_OAS_COS
+    !CPS CLM atmospheric grid and landsurface grid are the same
+    !CPS OASIS does the interpolation from COSMO rotated grid to CLM atmosphere grid
+    !CPS This area average interpolation generates some perturbation even when the two grids
+    !CPS are same
+
+    !CFG I deaktivated it in the master branch again since it caused troubles on JURECA/JUQUEEN at
+    !CFG least with NRW testcase in which land grid size != atmospheric grid size. 
+    !CFG For idealized testcases it might be worthwhile to manualy activate it again.      
+!    av_atm_d2a = av_drv_d2a
+!#else
+    if (datlon*datlat == 1) then          !CPS why?
+       av_atm_d2a = av_drv_d2a            !CPS
+    else                                  !CPS
+       call mct_Smat_AvMult(av_drv_d2a, sMatP_d2a, av_atm_d2a, vector=usevector)
+       call mct_aVect_unpermute(av_atm_d2a, perm_atm_gdc2glo)
+    endif                                 !CPS
+!#endif
 
   end subroutine interpa2s
 
