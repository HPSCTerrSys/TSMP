--- /p/home/jusers/ghasemi1/jureca/project/RTDO1/terrsysmp/parflow3_2/pfsimulator/parflow_lib/nl_function_eval.c	2016-07-08 19:25:18.000000000 +0200
+++ /p/home/jusers/ghasemi1/jureca/project/RTDO1/terrsysmp/bldsva/intf_oas3/parflow3_2/tsmp/nl_function_eval.c	2019-12-04 12:52:08.038639000 +0100
@@ -210,6 +210,15 @@
    int         *fdir;
    int          ipatch, ival;
    int          dir = 0;
+
+   int         freedrain = 0;  
+
+#ifdef FREEDRAINAGE
+   freedrain = 1;
+   printf("free drainage BC used \n");
+#endif
+
+
    
    VectorUpdateCommHandle  *handle;
 
@@ -221,7 +230,10 @@
    /* diffusive test here, this is NOT PF style and should be 
     re-done putting keys in BC Pressure Package and adding to the 
     datastructure for overlandflowBC */
-      diffusive = GetIntDefault("OverlandFlowDiffusive",0);
+   // diffusive = 0;
+   // printf(" diffusive: %d \n", diffusive);
+    diffusive = GetIntDefault("OverlandFlowDiffusive",0);
+   // printf(" diffusive: %d \n", diffusive);
     
     int          overlandspinup;   //@RMM
     overlandspinup = GetIntDefault("OverlandFlowSpinUp",0);
@@ -237,6 +249,16 @@
    qx = NewVectorType( grid2d, 1, 1, vector_cell_centered_2D);
    qy = NewVectorType( grid2d, 1, 1, vector_cell_centered_2D);
 
+   /* Pass permeability values */
+   /*
+     handle = InitVectorUpdate(permeability_x, VectorUpdateAll);
+     FinalizeVectorUpdate(handle);
+
+     handle = InitVectorUpdate(permeability_y, VectorUpdateAll);
+     FinalizeVectorUpdate(handle);
+
+     handle = InitVectorUpdate(permeability_z, VectorUpdateAll);
+     FinalizeVectorUpdate(handle); */
 
    /* Calculate pressure dependent properties: density and saturation */
 
@@ -246,14 +268,17 @@
    PFModuleInvokeType(SaturationInvoke, saturation_module, (saturation, pressure, density, 
    gravity, problem_data, CALCFCN));
 
- 
+   /* bc_struct = PFModuleInvoke(BCStruct *, bc_pressure, 
+      (problem_data, grid, gr_domain, time));*/
+
+   /*@ Why are the above things calculated here again; they were allready
+     calculated in the driver solver_richards and passed further @*/
+
    /* Calculate accumulation terms for the function values */
 
    ForSubgridI(is, GridSubgrids(grid))
    {
       subgrid = GridSubgrid(grid, is);
-      Subgrid* grid2d_subgrid = GridSubgrid(grid2d, is);
-      int grid2d_iz = SubgridIZ(grid2d_subgrid);
 	
       d_sub  = VectorSubvector(density, is);
       od_sub = VectorSubvector(old_density, is);
@@ -313,10 +338,9 @@
       {
 	 ip  = SubvectorEltIndex(f_sub,   i, j, k);
 	 ipo = SubvectorEltIndex(po_sub,  i, j, k);
-	 io = SubvectorEltIndex(x_ssl_sub, i, j, grid2d_iz);
-	 
-     /*     del_x_slope = (1.0/cos(atan(x_ssl_dat[io])));
-          del_y_slope = (1.0/cos(atan(y_ssl_dat[io])));  */
+          io = SubvectorEltIndex(f_sub, i, j, 0);
+          del_x_slope = (1.0/cos(atan(x_ssl_dat[io])));
+          del_y_slope = (1.0/cos(atan(y_ssl_dat[io])));
           del_x_slope = 1.0;
           del_y_slope = 1.0;
           
@@ -329,8 +353,6 @@
    ForSubgridI(is, GridSubgrids(grid))
    {
       subgrid = GridSubgrid(grid, is);
-      Subgrid       *grid2d_subgrid          = GridSubgrid(grid2d, is);
-      int grid2d_iz = SubgridIZ(grid2d_subgrid);
 	
       ss_sub  = VectorSubvector(sstorage, is);
 
@@ -388,13 +410,13 @@
       GrGeomInLoop(i, j, k, gr_domain, r, ix, iy, iz, nx, ny, nz,
       {
 	 ip = SubvectorEltIndex(f_sub, i, j, k);
-	 io = SubvectorEltIndex(x_ssl_sub, i, j, grid2d_iz);
-
-       /*   del_x_slope = (1.0/cos(atan(x_ssl_dat[io])));
-          del_y_slope = (1.0/cos(atan(y_ssl_dat[io])));  */
+          io = SubvectorEltIndex(f_sub, i, j, 0);
+          del_x_slope = (1.0/cos(atan(x_ssl_dat[io])));
+          del_y_slope = (1.0/cos(atan(y_ssl_dat[io])));
           del_x_slope = 1.0;
           del_y_slope = 1.0;
 	 fp[ip] += ss[ip]*vol*del_x_slope*del_y_slope*z_mult_dat[ip] *(pp[ip]*sp[ip]*dp[ip] - opp[ip]*osp[ip]*odp[ip]);
+         // printf(" ZMD2: %d %f \n",ip, z_mult_dat[ip]);
           
       });
    }
@@ -408,8 +430,6 @@
    ForSubgridI(is, GridSubgrids(grid))
    {
       subgrid = GridSubgrid(grid, is);
-      Subgrid       *grid2d_subgrid          = GridSubgrid(grid2d, is);
-      int grid2d_iz = SubgridIZ(grid2d_subgrid);
 	
       s_sub  = VectorSubvector(source, is);
       f_sub  = VectorSubvector(fval, is);
@@ -455,10 +475,9 @@
       {
 
 	 ip = SubvectorEltIndex(f_sub, i, j, k);
-	 io = SubvectorEltIndex(x_ssl_sub, i, j, grid2d_iz);
-
-	 /* del_x_slope = (1.0/cos(atan(x_ssl_dat[io])));
-          del_y_slope = (1.0/cos(atan(y_ssl_dat[io])));  */
+          io = SubvectorEltIndex(f_sub, i, j, 0);
+          del_x_slope = (1.0/cos(atan(x_ssl_dat[io])));
+          del_y_slope = (1.0/cos(atan(y_ssl_dat[io])));
           del_x_slope = 1.0;
           del_y_slope = 1.0;
 	 fp[ip] -= vol*del_x_slope*del_y_slope*z_mult_dat[ip] * dt * (sp[ip] + et[ip]);
@@ -543,14 +562,10 @@
 		  (rel_perm, pressure, density, gravity, problem_data, 
 		   CALCFCN));
 
-   
    /* Calculate contributions from second order derivatives and gravity */
    ForSubgridI(is, GridSubgrids(grid))
    {
       subgrid = GridSubgrid(grid, is);
-      
-      Subgrid       *grid2d_subgrid          = GridSubgrid(grid2d, is);
-      int grid2d_iz = SubgridIZ(grid2d_subgrid);
 	
       p_sub     = VectorSubvector(pressure, is);
       d_sub     = VectorSubvector(density, is);
@@ -600,80 +615,111 @@
       permyp = SubvectorData(permy_sub);
       permzp = SubvectorData(permz_sub);
        
-      /* @RMM  added to provide slopes to terrain fns */
-      x_ssl_dat = SubvectorData(x_ssl_sub);
-      y_ssl_dat = SubvectorData(y_ssl_sub);
-      
-      /* @RMM added to provide variable dz */
-      z_mult_dat = SubvectorData(z_mult_sub);
-      
-      qx_sub = VectorSubvector(qx, is);
+       /* @RMM  added to provide slopes to terrain fns */
+       x_ssl_dat = SubvectorData(x_ssl_sub);
+       y_ssl_dat = SubvectorData(y_ssl_sub);
+       
+       /* @RMM added to provide variable dz */
+       z_mult_dat = SubvectorData(z_mult_sub);
+       
+       qx_sub = VectorSubvector(qx, is);
 
 
       GrGeomInLoop(i, j, k, gr_domain, r, ix, iy, iz, nx, ny, nz,
       {
 	 ip = SubvectorEltIndex(p_sub, i, j, k);
-	 io = SubvectorEltIndex(x_ssl_sub, i, j, grid2d_iz);
+     io = SubvectorEltIndex(p_sub, i, j, 0);     
 
           /* @RMM: modified the terrain-following transform
            to be swtichable in the UZ
            terms:
            1. x dir terrain tendency:  gravity*sin(atan(x_ssl_dat[io]))
            2. y dir terrain tendency:  gravity*sin(atan(y_ssl_dat[io]))
-           3. change in delta-x due to slope: (1.0/cos(atan(x_ssl_dat[io])))
-           4. change in delta-y due to slope: (1.0/cos(atan(y_ssl_dat[io]))) */
-
-          
+           3. z dir terrain decrease in g: cos(atan(sqrt(pow(x_ssl_dat[io],2)+pow(y_ssl_dat[io],2))))
+           4. change in delta-x due to slope: (1.0/cos(atan(x_ssl_dat[io])))
+           5. change in delta-y due to slope: (1.0/cos(atan(y_ssl_dat[io]))) */
+/*          if (pp[ip] < 0.) {
+              x_dir_g = 0.0;
+              y_dir_g = 0.0;
+              z_dir_g = 1.0;
+              
+          } else { */
+         // x_dir_g = RPMean(x_ssl_dat[io],x_ssl_dat[io+1]
+         //   ,gravity*sin(atan(x_ssl_dat[io])),gravity*sin(atan(x_ssl_dat[io+1])));
           x_dir_g = Mean(gravity*sin(atan(x_ssl_dat[io])),gravity*sin(atan(x_ssl_dat[io+1])));
+         // x_dir_g = gravity*sin(Mean(atan(x_ssl_dat[io]),atan(x_ssl_dat[io+1])));
+          //x_dir_g = gravity*sin(atan(x_ssl_dat[io]))
+         // x_dir_g = gravity*sin(atan(x_ssl_dat[io]));
+         // x_dir_g = x_ssl_dat[io];
           x_dir_g_c = Mean(gravity*cos(atan(x_ssl_dat[io])),gravity*cos(atan(x_ssl_dat[io+1])));
+         // x_dir_g_c = gravity*cos(Mean(atan(x_ssl_dat[io]),atan(x_ssl_dat[io+1])));
+         //  x_dir_g_c = gravity*cos(atan(x_ssl_dat[io]));
+          //x_dir_g_c = 1.0; 
+          
+      //    y_dir_g = RPMean(y_ssl_dat[io], x_ssl_dat[io+sy_p]
+      //      ,gravity*sin(atan(y_ssl_dat[io])),gravity*sin(atan(y_ssl_dat[io+sy_p])));
           y_dir_g = Mean(gravity*sin(atan(y_ssl_dat[io])),gravity*sin(atan(y_ssl_dat[io+sy_p])));
-	      y_dir_g_c = Mean(gravity*cos(atan(y_ssl_dat[io])),gravity*cos(atan(y_ssl_dat[io+sy_p])));
+         // y_dir_g = gravity*sin(Mean(atan(y_ssl_dat[io]),atan(y_ssl_dat[io+sy_p])));
+          //y_dir_g = gravity*sin(atan(y_ssl_dat[io]));
+          //y_dir_g = y_ssl_dat[io];
+          y_dir_g_c = Mean(gravity*cos(atan(y_ssl_dat[io])),gravity*cos(atan(y_ssl_dat[io+sy_p])));
+          //y_dir_g_c = gravity*cos(Mean(atan(y_ssl_dat[io]),atan(y_ssl_dat[io+sy_p])));
+         // y_dir_g_c = gravity*cos(atan(y_ssl_dat[io]));
+          //y_dir_g_c = 1.0;
 
+          // z_dir_g = cos(atan(sqrt(pow(x_ssl_dat[io],2)+pow(y_ssl_dat[io],2))));
           z_dir_g = 1.0;
+         // }
+          del_x_slope = (1.0/cos(atan(x_ssl_dat[io])));
+          del_y_slope = (1.0/cos(atan(y_ssl_dat[io])));
 
           del_x_slope = 1.0;
           del_y_slope = 1.0;
           
 	 /* Calculate right face velocity.
       diff >= 0 implies flow goes left to right */
-	
-          diff    = pp[ip] - pp[ip+1];
+	 diff    = pp[ip] - pp[ip+1];
           updir= (diff/dx)*x_dir_g_c - x_dir_g;
-          
-          u_right = z_mult_dat[ip]*ffx*del_y_slope * PMean(pp[ip], pp[ip+1],
-                    permxp[ip], permxp[ip+1])
-	                * (diff / (dx *del_x_slope) )*x_dir_g_c
-                    * RPMean(updir,0.0,
-                    rpp[ip]*dp[ip],
-	                rpp[ip+1]*dp[ip+1])
-	                / viscosity;
+	 u_right = z_mult_dat[ip]*ffx*del_y_slope * PMean(pp[ip], pp[ip+1], 
+	 permxp[ip], permxp[ip+1])
+	    * (diff / (dx *del_x_slope) )*x_dir_g_c
+	   // * RPMean(pp[ip], pp[ip+1],
+           * RPMean(updir,0.0,
+                 rpp[ip]*dp[ip],
+	    rpp[ip+1]*dp[ip+1])
+	    / viscosity;
 
           /* Calculate right face velocity gravity terms
            @RMM added sin* g term to test terrain-following grid
-            upwind on pressure is currently implemented
+           should I upwind on gravity terms or pressure?
+           pressure is currently       implemented
            Sx < 0 implies flow goes left to right */
           
           u_right += z_mult_dat[ip]*ffx *del_y_slope* PMean(pp[ip], pp[ip+1], 
-                     permxp[ip], permxp[ip+1])
-                     * (-x_dir_g )
-                     * RPMean(updir, 0.0, rpp[ip]*dp[ip],
-                     rpp[ip+1]*dp[ip+1])
-                     / viscosity;
+                                permxp[ip], permxp[ip+1])
+          * (-x_dir_g )
+//         * RPMean(pp[ip], pp[ip+1],rpp[ip]*dp[ip],
+         //* RPMean(-x_dir_g, 0.0, rpp[ip]*dp[ip],
+         // * RPMean(-x_dir_g, 0.0, rpp[ip]*dp[ip],
+            * RPMean(updir, 0.0, rpp[ip]*dp[ip],
+          rpp[ip+1]*dp[ip+1])
+//          *rpp[ip]*dp[ip]
+          / viscosity; 
  
           
 	 /* Calculate front face velocity.
 	    diff >= 0 implies flow goes back to front */
-	     diff    = pp[ip] - pp[ip+sy_p];
-         updir= (diff/dy)*y_dir_g_c - y_dir_g;
-	 
-         u_front = z_mult_dat[ip]*ffy*del_x_slope
-                  * PMean(pp[ip], pp[ip+sy_p], permyp[ip], permyp[ip+sy_p])
-	              * (diff / (dy*del_y_slope) )*y_dir_g_c
-                  * RPMean(updir, 0.0,
-                    rpp[ip]*dp[ip],
-	                rpp[ip+sy_p]*dp[ip+sy_p])
-	                / viscosity;
-
+	 diff    = pp[ip] - pp[ip+sy_p];
+          updir= (diff/dy)*y_dir_g_c - y_dir_g;    
+	 u_front = z_mult_dat[ip]*ffy*del_x_slope  
+        * PMean(pp[ip], pp[ip+sy_p], permyp[ip], permyp[ip+sy_p])
+	    * (diff / (dy*del_y_slope) )*y_dir_g_c
+	   // * RPMean(pp[ip], pp[ip+sy_p],
+          * RPMean(updir, 0.0,
+          rpp[ip]*dp[ip],
+	    rpp[ip+sy_p]*dp[ip+sy_p])
+	    / viscosity;
+          
           /* Calculate front face velocity gravity terms
            @RMM added sin* g term to test terrain-following grid
            note upwinding on gravity terms not pressure 
@@ -681,35 +727,50 @@
            */
 	
           u_front += z_mult_dat[ip]*ffy*del_x_slope
-                     * PMean(pp[ip], pp[ip+sy_p], permyp[ip], permyp[ip+sy_p])
-                     * (-y_dir_g)
-                     * RPMean(updir, 0.0, rpp[ip]*dp[ip],
-                       rpp[ip+sy_p]*dp[ip+sy_p])
-                       / viscosity;
-
+          * PMean(pp[ip], pp[ip+sy_p], permyp[ip], permyp[ip+sy_p])
+          * (-y_dir_g)
+   //       * RPMean(pp[ip], pp[ip+sy_p], rpp[ip]*dp[ip],
+  //        * RPMean(-y_dir_g,0.0, rpp[ip]*dp[ip],
+            * RPMean(updir, 0.0, rpp[ip]*dp[ip],
+                   rpp[ip+sy_p]*dp[ip+sy_p])
+ //         *rpp[ip]*dp[ip]
+          / viscosity;
+          
 	 /* Calculate upper face velocity.
 	    diff >= 0 implies flow goes lower to upper 
+      @RMM added cos to g term to test terrain-following grid
       */
-          sep = dz*(Mean(z_mult_dat[ip],z_mult_dat[ip+sz_p]));
+            sep = dz*(Mean(z_mult_dat[ip],z_mult_dat[ip+sz_p]));
+          //printf("%d %d %d %f %f \n",i,j,k,z_mult_dat[ip], z_mult_dat[ip+sz_p]);
+          //printf("%d %d %d %f %f \n",i,j,k,pp[ip], pp[ip+sz_p]);
+
+
+         // sep = dz*z_mult_dat[ip];
+
+        //  lower_cond = pp[ip]/ sep   - 0.5 *(Mean(z_mult_dat[ip],z_mult_dat[ip+sz_p]))* dp[ip] * gravity  * 
+        //     z_dir_g; 
           
+        //  sep = dz*z_mult_dat[ip+sz_p];
+
+       //   upper_cond = pp[ip+sz_p] / sep  + 0.5*(Mean(z_mult_dat[ip],z_mult_dat[ip+sz_p]))* dp[ip+sz_p] * gravity * 
+       //     z_dir_g; 
+          
+          //CPS
          
-          lower_cond = pp[ip]/ sep
-                       - (z_mult_dat[ip]/(z_mult_dat[ip]+z_mult_dat[ip+sz_p]))
-                       * dp[ip] * gravity * z_dir_g;
-
-          upper_cond = pp[ip+sz_p] / sep
-                       + (z_mult_dat[ip+sz_p]/(z_mult_dat[ip]+z_mult_dat[ip+sz_p]))
-                       * dp[ip+sz_p] * gravity *z_dir_g;
+          lower_cond = pp[ip]/ sep   - (z_mult_dat[ip]/(z_mult_dat[ip]+z_mult_dat[ip+sz_p]))  * dp[ip] * gravity  * z_dir_g;
+
+          upper_cond = pp[ip+sz_p] / sep  + (z_mult_dat[ip+sz_p]/(z_mult_dat[ip]+z_mult_dat[ip+sz_p])) * dp[ip+sz_p] * gravity *z_dir_g;
 
  
           diff = (lower_cond - upper_cond);
-          
-          u_upper = ffz*del_x_slope*del_y_slope
-                    * PMeanDZ(permzp[ip], permzp[ip+sz_p], z_mult_dat[ip],z_mult_dat[ip+sz_p])
-	                * diff
-	                * RPMean(lower_cond, upper_cond, rpp[ip]*dp[ip],
-                      rpp[ip+sz_p]*dp[ip+sz_p])
-	                / viscosity;
+	 u_upper = ffz*del_x_slope*del_y_slope 
+          * PMeanDZ(permzp[ip], permzp[ip+sz_p], z_mult_dat[ip],z_mult_dat[ip+sz_p])
+	    * diff
+	    * RPMean(lower_cond, upper_cond, rpp[ip]*dp[ip], 
+	    rpp[ip+sz_p]*dp[ip+sz_p])
+	    / viscosity;
+        //  printf("uupper: %10.6e \n", u_upper);
+
 
 	 fp[ip]      += dt * ( u_right + u_front + u_upper );
 	 fp[ip+1]    -= dt * u_right;
@@ -723,8 +784,6 @@
    ForSubgridI(is, GridSubgrids(grid))
    {
       subgrid = GridSubgrid(grid, is);
-      Subgrid       *grid2d_subgrid          = GridSubgrid(grid2d, is);
-      int grid2d_iz = SubgridIZ(grid2d_subgrid);
 	 
       d_sub     = VectorSubvector(density, is);
       rp_sub    = VectorSubvector(rel_perm, is);
@@ -827,18 +886,24 @@
 	       BCStructPatchLoop(i, j, k, fdir, ival, bc_struct, ipatch, is,
 	       {
 		  ip   = SubvectorEltIndex(p_sub, i, j, k);
-		  io = SubvectorEltIndex(x_ssl_sub, i, j, grid2d_iz);
-
+          io = SubvectorEltIndex(p_sub, i, j, 0);    
 		  value =  bc_patch_values[ival];
+//               if (pp[ip] < 0.) {
                    x_dir_g = 0.0;
                    y_dir_g = 0.0;
                    z_dir_g = 1.0;
                    
+/*               } else {
+                   
+               x_dir_g = gravity*sin(atan(x_ssl_dat[io]));
+               y_dir_g = gravity*sin(atan(y_ssl_dat[io]));
+               z_dir_g = cos(atan(sqrt(pow(x_ssl_dat[io],2)+pow(y_ssl_dat[io],2)))); */
+    //           }
                 del_x_slope = (1.0/cos(atan(x_ssl_dat[io])));
-                del_y_slope = (1.0/cos(atan(y_ssl_dat[io])));
+               del_y_slope = (1.0/cos(atan(y_ssl_dat[io])));
                
-                del_x_slope = 1.0;
-                del_y_slope = 1.0;
+               del_x_slope = 1.0;
+               del_y_slope = 1.0;
                
 
 		  /* Don't currently do upstream weighting on boundaries */
@@ -960,9 +1025,11 @@
 			{
 			   dir = -1;
                 sep = dz*Mean(z_mult_dat[ip],z_mult_dat[ip-sz_p]);  //RMM
+                //sep = dz*z_mult_dat[ip];  //RMM
+               //printf("case-1 %d %d %d %f %f  \n", i,j,k, z_mult_dat[ip],z_mult_dat[ip-sz_p]);
                 
-			    lower_cond = pp[ip-sz_p] / sep
-                -  (z_mult_dat[ip-sz_p]/(z_mult_dat[ip]+z_mult_dat[ip-sz_p])) *dp[ip-sz_p] * gravity *
+			   lower_cond = pp[ip-sz_p] / sep
+			      -  (z_mult_dat[ip-sz_p]/(z_mult_dat[ip]+z_mult_dat[ip-sz_p])) *dp[ip-sz_p] * gravity *
                  z_dir_g;
                 
 			   upper_cond = pp[ip]/ sep + (z_mult_dat[ip]/(z_mult_dat[ip]+z_mult_dat[ip-sz_p]))* dp[ip] * gravity*
@@ -978,6 +1045,9 @@
 			      rpp[ip-sz_p]*dp[ip-sz_p], rpp[ip]*dp[ip]) 
 			      / viscosity;
                 
+                //sep = dz*z_mult_dat[ip];
+                sep = dz*z_mult_dat[ip]/2.0;
+                //printf("case-1 %f %f %d \n", sep,z_mult_dat[ip], ip);
 
 			   lower_cond = value/sep  -  0.25*dp[ip] * gravity;
 			   upper_cond = pp[ip]/sep +  0.25*dp[ip] * gravity;
@@ -995,13 +1065,17 @@
                  */
                 
                 sep = dz*Mean(z_mult_dat[ip],z_mult_dat[ip+sz_p]);  //RMM
- 
+                //sep = dz*z_mult_dat[ip];  //RMM
+               // printf("case+1 %f %f %f %d \n", sep,z_mult_dat[ip],z_mult_dat[ip+sz_p], ip);
+               // printf("%d %d %d %f %f \n",i,j,k,z_mult_dat[ip], z_mult_dat[ip+sz_p]);
+               // printf("%d %d %d %f %f \n",i,j,k,pp[ip], pp[ip+sz_p]);
+
+
                 lower_cond = pp[ip]/sep  - (z_mult_dat[ip]/(z_mult_dat[ip]+z_mult_dat[ip+sz_p])) * dp[ip] * gravity *
                 z_dir_g; 
                 
-			   upper_cond = pp[ip+sz_p] /sep
-                           + (z_mult_dat[ip+sz_p]/(z_mult_dat[ip]+z_mult_dat[ip+sz_p]))
-                           * dp[ip+sz_p] * gravity  *  z_dir_g;
+			   upper_cond = pp[ip+sz_p] /sep + (z_mult_dat[ip+sz_p]/(z_mult_dat[ip]+z_mult_dat[ip+sz_p])) *dp[ip+sz_p] * gravity  *
+                z_dir_g; 
                  
                 diff = (lower_cond - upper_cond);
                 
@@ -1013,7 +1087,11 @@
 			      * RPMean(lower_cond, upper_cond, 
 			      rpp[ip]*dp[ip], rpp[ip+sz_p]*dp[ip+sz_p])
 			      / viscosity;
- 
+               // printf("uold: %10.6e \n", u_old);
+                
+                sep = dz*z_mult_dat[ip]/2.0;
+               // printf("case+1 %f %f %d \n", sep,z_mult_dat[ip], ip);
+
                 lower_cond = (pp[ip] / sep) - 0.25 *  dp[ip] * gravity *
                z_dir_g; 
                 
@@ -1029,6 +1107,7 @@
 		     u_new = u_new * ffz * del_x_slope*del_y_slope*
                ( permzp[ip] / viscosity ) 
 			* 2.0 * diff;
+              //printf("%f %f %f %f %f \n", u_new, ffz, del_x_slope, del_y_slope, diff);
 		  }
 
 		  /* Remove the boundary term computed above */
@@ -1046,11 +1125,19 @@
 	       BCStructPatchLoop(i, j, k, fdir, ival, bc_struct, ipatch, is,
 	       {
 		  ip   = SubvectorEltIndex(p_sub, i, j, k);
-		  io = SubvectorEltIndex(x_ssl_sub, i, j, grid2d_iz);
-
+          io   = SubvectorEltIndex(p_sub, i, j, 0);
+//               if (pp[ip] < 0.) {
                    x_dir_g = 0.0;
                    y_dir_g = 0.0;
                    z_dir_g = 1.0;
+                   
+/*               } else { */
+//               x_dir_g = gravity*sin(atan(x_ssl_dat[io]));
+//               y_dir_g = gravity*sin(atan(y_ssl_dat[io]));
+//               z_dir_g = cos(atan(sqrt(pow(x_ssl_dat[io],2)+pow(y_ssl_dat[io],2))));
+            //   }
+                   del_x_slope = (1.0/cos(atan(x_ssl_dat[io])));
+               del_y_slope = (1.0/cos(atan(y_ssl_dat[io])));
                
               del_x_slope = 1.0;
               del_y_slope = 1.0;
@@ -1158,9 +1245,10 @@
 			case -1:
 			   dir = -1;
                 sep = dz*Mean(z_mult_dat[ip],z_mult_dat[ip-sz_p]);  //RMM     
+                   // sep = dz*z_mult_dat[ip];  //RMM
 
                      lower_cond = (pp[ip-sz_p] / sep) 
-			      -  (z_mult_dat[ip]-sz_p/(z_mult_dat[ip]+z_mult_dat[ip-sz_p]))  * dp[ip-sz_p] * gravity*
+			      -  (z_mult_dat[ip-sz_p]/(z_mult_dat[ip]+z_mult_dat[ip-sz_p]))  * dp[ip-sz_p] * gravity*
                     z_dir_g;
                      
 			   upper_cond = (pp[ip] / sep) + (z_mult_dat[ip]/(z_mult_dat[ip]+z_mult_dat[ip-sz_p]))  * dp[ip] * gravity*
@@ -1178,6 +1266,7 @@
 			case  1:
 			   dir = 1;
               sep = dz*Mean(z_mult_dat[ip],z_mult_dat[ip+sz_p]);  //RMM
+ //                   sep = dz*z_mult_dat[ip];  //RMM
 
 			   lower_cond = (pp[ip] / sep) - (z_mult_dat[ip]/(z_mult_dat[ip]+z_mult_dat[ip+sz_p])) * dp[ip] * gravity*
                     z_dir_g;
@@ -1195,18 +1284,28 @@
 			      rpp[ip]*dp[ip], rpp[ip+sz_p]*dp[ip+sz_p])
 			      / viscosity;
 
-   
+                //     sep = dz*z_mult_dat[ip];  //RMM
+                //     q_overlnd =  -vol*z_mult_dat[ip]*(pfmax(pp[ip],0.0) - 0.0) / sep;
+ 
                      
 			   break;
 		     }
 		     u_new = ffz* del_x_slope* del_y_slope;
               
+              //u_new += q_overlnd;
 		  }
 
 		  /* Remove the boundary term computed above */
 		  fp[ip] -= dt * dir * u_old;
 		  /* Add the correct boundary term */
-		  u_new = u_new * bc_patch_values[ival];
+
+                  /* JKe: 1D-Free-Drainage:    (new, 1D free drainage by hydraulic conductivity)  */
+
+		  if (freedrain)
+                    u_new = u_new * rpp[ip]*permzp[ip]*bc_patch_values[ival];
+		  else
+		    u_new = u_new * bc_patch_values[ival];
+
 		  fp[ip] += dt * dir * u_new;
 	       });
 
@@ -1218,11 +1317,20 @@
 	       BCStructPatchLoop(i, j, k, fdir, ival, bc_struct, ipatch, is,
 	       {
 		  ip   = SubvectorEltIndex(p_sub, i, j, k);
-		  io = SubvectorEltIndex(x_ssl_sub, i, j, grid2d_iz);
-		  
+          io   = SubvectorEltIndex(p_sub, i, j, 0);
+//               if (pp[ip] < 0.) {
                    x_dir_g = 0.0;
                    y_dir_g = 0.0;
                    z_dir_g = 1.0;
+                   
+//               } else { 
+                   
+//               x_dir_g = gravity*sin(atan(x_ssl_dat[io]));
+ //              y_dir_g = gravity*sin(atan(y_ssl_dat[io]));
+ //              z_dir_g = cos(atan(sqrt(pow(x_ssl_dat[io],2)+pow(y_ssl_dat[io],2))));
+            //   }
+               del_x_slope = (1.0/cos(atan(x_ssl_dat[io])));
+               del_y_slope = (1.0/cos(atan(y_ssl_dat[io])));
                
                del_x_slope = 1.0;
                del_y_slope = 1.0;
@@ -1350,6 +1458,7 @@
 			case  1:
 			   dir = 1;
                     sep = dz*Mean(z_mult_dat[ip],z_mult_dat[ip+sz_p]);  //RMM
+                  //   sep = dz*z_mult_dat[ip];  //RMM
 
 			   lower_cond = (pp[ip] / sep) - (z_mult_dat[ip]/(z_mult_dat[ip]+z_mult_dat[ip+sz_p])) * dp[ip] * gravity *
                z_dir_g;
@@ -1391,7 +1500,7 @@
                 double *dummy1, *dummy2, *dummy3, *dummy4; 
             PFModuleInvokeType(OverlandFlowEvalDiffInvoke, overlandflow_module_diff, (grid, is, bc_struct, ipatch, problem_data, pressure,
                                                                              ke_, kw_, kn_, ks_, 
-                                        dummy1, dummy2, dummy3, dummy4,
+//                                        dummy1, dummy2, dummy3, dummy4,
                                                                                       qx_, qy_, CALCFCN));
             }
 #else
@@ -1461,23 +1570,70 @@
 
 			   q_overlnd = 0.0;
                      
+                    /* old version, not sure we 
+                    should be differecing variable dz with bddy values */
+                    // sep = dz*Mean(z_mult_dat[ip],z_mult_dat[ip-sz_p]);  //RMM 
+                   /* shorthand for new dz * multiplier */
+                   // sep = dz*z_mult_dat[ip];  //RMM
+                     
+                     
+                     
+			   q_overlnd =  vol*z_mult_dat[ip]
+                     * (pfmax(pp[ip],0.0) - pfmax(opp[ip],0.0)) / sep+
+			      dt * vol * z_mult_dat[ip]* ((ke_[io]-kw_[io])/dx + (kn_[io] - ks_[io])/dy) 
+                     / sep ;// + (exp(pfmin(pp[ip],0.0)* public_xtra -> SpinupDampP1 )* public_xtra -> SpinupDampP2 ); //NBE  
                      
                       q_overlnd =  vol
                      * (pfmax(pp[ip],0.0) - pfmax(opp[ip],0.0)) / dz +
                      dt * vol* ((ke_[io]-kw_[io])/dx + (kn_[io] - ks_[io])/dy) 
-                     / dz + vol*dt/dz*(exp(pfmin(pp[ip],0.0)* public_xtra -> SpinupDampP1 )* public_xtra -> SpinupDampP2 );
-                     //NBE
+                     / dz + vol*dt/dz*(exp(pfmin(pp[ip],0.0)* public_xtra -> SpinupDampP1 )* public_xtra -> SpinupDampP2 ); //NBE  
                      
-                   
+                    /* q_overlnd = vol * (pfmax(pp[ip],0.0) - pfmax(opp[ip],0.0)) /dz +
+                     dt * vol * ((ke_[io]-kw_[io])/dx + (kn_[io] - ks_[io])/dy) / dz;  */
+
                       if (overlandspinup == 1) {
                      /* add flux loss equal to excess head  that overwrites the prior overland flux */
-                          q_overlnd =  (vol/dz)*dt*((pfmax(pp[ip],0.0) - 0.0)+exp(pfmin(pp[ip],0.0)*
-                                       public_xtra -> SpinupDampP1 )* public_xtra -> SpinupDampP2 ); //@RMM
+                     sep = dz*z_mult_dat[ip];  //RMM NOTE this should be the "long form" of sep that uses pmean but need to be consistent w/ jacobian
+                         // q_overlnd = 0.0;
+   
+
+
+                       q_overlnd =  vol*z_mult_dat[ip]*dt*((pfmax(pp[ip],0.0) - 0.0)+exp(pfmin(pp[ip],0.0)*10.0)*0.001);
+
+ 
+                              //q_overlnd =  vol*z_mult_dat[ip]*dt*((pp[ip] - 0.0) +exp(pfmin(pp[ip],0.0)*10.0)*0.001);
+                          
+                          // Next line was RMM original
+                          //q_overlnd =  (vol/dz)*dt*((pfmax(pp[ip],0.0) - 0.0)+exp(pfmin(pp[ip],0.0)*1.0)*0.001);
+//                          q_overlnd =  vol*z_mult_dat[ip]*dt*((pfmax(pp[ip],0.0) - 0.0)+exp(pfmin(pp[ip],0.0)* public_xtra -> SpinupDampP1 )* public_xtra -> SpinupDampP2 ); //NBE
+                          //q_overlnd =  (vol/dz)*dt*((pfmax(pp[ip],0.0) - 0.0)+exp(pfmin(pp[ip],0.0)* public_xtra -> SpinupDampP1 )* public_xtra -> SpinupDampP2 ); //@RMM
+                          //Laura's version
+                          q_overlnd =  (vol/dz)*dt*((pfmax(pp[ip],0.0) - 0.0)+exp(pfmin(pp[ip],0.0)* public_xtra -> SpinupDampP1 )* public_xtra -> SpinupDampP2 ); //@RMM
+                           // printf("spinup keys: %f %f \n",public_xtra -> SpinupDampP1, public_xtra -> SpinupDampP2);
+
+                         //q_overlnd =  vol*z_mult_dat[ip]*dt*((pfmax(pp[ip],0.0) - 0.0)+exp(pfmin(pp[ip],0.0)*1.0)*0.000001);
+    
+
+                         // q_overlnd =  vol*z_mult_dat[ip]*dt*((pfmax(pp[ip],0.0) - 0.0));
                        }
                      
+/*			   obf_dat[io] = 0.0;
+			   if ( i >= 0 && i <= (gnx-1) && j == 0 && qy_[io] < 0.0 ){ //south face
+			      obf_dat[io]+= fabs(qy_[io]);
+			   } else if (i == 0 && j >= 0 && j <= (gny-1) && qx_[io] < 0.0) { // west face
+			      obf_dat[io]+= fabs(qx_[io]);
+			   } else if (i >= 0 && i <= (gnx-1) && j == (gny-1) && qy_[io] > 0.0) { //north face
+			      obf_dat[io]+= fabs(qy_[io]);
+			   } else if (i == (gnx-1) && j >= 0 && j <= (gny-1) && qx_[io] > 0.0) { //east face
+			      obf_dat[io]+= fabs(qx_[io]);
+			   } else if (i > 0 && i < (gnx-1) && j > 0 && j < (gny-1)) { //interior
+			      obf_dat[io] = qx_[io];
+			   } */
 			   			
 
-                        fp[ip] += q_overlnd;
+                     
+			   fp[ip] += q_overlnd;
+                     //printf("Q: %f  ip:%i  \n", q_overlnd, ip);
 
    			   break;
 		     }
@@ -1491,7 +1647,8 @@
 	 }     /* End switch BCtype */
       }        /* End ipatch loop */
    }           /* End subgrid loop */
-
+   
+   
    /*
      Reset values inserted for the DirichletBC back to the decoupled
      problem used in the inactive cells.
@@ -1541,6 +1698,7 @@
       }        /* End ipatch loop */
    }           /* End subgrid loop */
 
+
    FreeBCStruct(bc_struct);
 
    PFModuleInvokeType(RichardsBCInternalInvoke, bc_internal, (problem, problem_data, fval, NULL, 
@@ -1603,8 +1761,12 @@
          PFModuleNewInstance(ProblemBCInternal(problem), () );
       (instance_xtra -> overlandflow_module) =
          PFModuleNewInstance(ProblemOverlandFlowEval(problem), () ); //DOK
+//       (instance_xtra -> overlandflow_module) =
+//       PFModuleNewInstance(ProblemOverlandFlowEval(problem), () ); //DOK
        (instance_xtra -> overlandflow_module_diff) =
        PFModuleNewInstance(ProblemOverlandFlowEvalDiff(problem), () ); //@RMM
+//       (instance_xtra -> overlandflow_module_diff) =
+//       PFModuleNewInstance(ProblemOverlandFlowEvalDiff(problem), () ); //@RMM
    }
    else
    {
@@ -1663,17 +1825,17 @@
 {
    PFModule      *this_module   = ThisPFModule;
    PublicXtra    *public_xtra;
-   char           key[IDB_MAX_KEY_LEN];
+//   char           key[IDB_MAX_KEY_LEN];
 
 
    public_xtra = ctalloc(PublicXtra, 1);
     
 /* These parameters dampen the transition/switching into overland flow to speedup
    the spinup process. */
-   sprintf(key, "OverlandSpinupDampP1");
-   public_xtra -> SpinupDampP1 = GetDoubleDefault(key, 0.0);
-   sprintf(key, "OverlandSpinupDampP2");
-   public_xtra -> SpinupDampP2 = GetDoubleDefault(key, 0.0); //NBE
+//   sprintf(key, "OverlandSpinupDampP1");
+//   public_xtra -> SpinupDampP1 = GetDoubleDefault(key, 0.0);
+//   sprintf(key, "OverlandSpinupDampP2");
+//   public_xtra -> SpinupDampP2 = GetDoubleDefault(key, 0.0); //NBE
 
    (public_xtra -> time_index) = RegisterTiming("NL_F_Eval");
 
